#!/usr/bin/env tclsh

package require Tk

################################################################################
# VARIABLES
#
namespace eval tQEMU {
  variable bin          [append bin "qemu-system-" $::tcl_platform(machine)]
  variable rtcbase      {utc}
  variable rtcbaselist  [list utc localtime]
  variable rtcclock     {host}
  variable rtcclocklist [list host rt vm]
  variable machine      {q35}
  variable machinelist  [list microvm pc q35 isapc none]
  variable accel        {kvm}
  variable accellist    [list kvm xen hax hvf whpx tcg]
  variable cpu          {host}
  variable cpulist      [list host max base qemu32 qemu64 kvm32 kvm64 486 pentium \
    pentium2 pentium3 coreduo core2duo n270 Broadwell Conroe Deverton Dhyana \
    EPYC Haswell IvyBridge KnightMill Nehalem Opteron_G1 Opteron_G2 Opteron_G3 \
    Opteron_G4 Opteron_G5 Penryn SandyBridge Snowridge Westmere]
  variable storage      {virtio-blk}
  variable storagelist  [list ahci ide-hd isa-ide lsi nvme scsi-hd virtio-9p virtio-blk virtio-scsi]
  variable ram          {2G}
  variable ramlist      [list 128M 254M 512M 1G 2G 4G]
  variable display      {gtk}
  variable displaylist  [list sdl gtk curses spice-app egl-headless vnc=:0 vnc=:1 none]
  variable vga          {virtio-vga}
  variable vgalist      [list ati-vga bochs-display cirrus-vga isa-cirrus-vga \
    isa-vga qxl-vga ramfb sga VGA virtio-gpu virtio-vga vmware-svga]
  variable audio        {pa}
  variable audiolist    [list alsa coreaudio dsound oss pa sdl spice wav none]
  variable snd          {intel-hda}
  variable sndlist      [list ac97 adlib cs4231a es1370 gus ich9-intel-hda \
    intel-hda sb16 none]
  variable nic          {virtio-net}
  variable niclist      [list e1000 e1000-82544gc e1000-82545em e1000e i82550 \
    i82551 i82557a i82557b i82557c i82558a i82558b i82559a i82559b i82559c \
    i82559er i82562 i82801 ne2k_isa ne2k_pci pcnet rocker rtl8139 tulip \
    usb-net virtio-net vmxnet3 none]
  variable menu         {off}
  variable strict       {off}
  variable cdrom        {}
  variable smb          {}
  variable filelist     [list]
  variable imgsize      20
  variable msg          [list]
  variable hyperv       0
  variable snapshot     {}
  variable fscreen      0
  variable daemon       1
  variable pause        0
  variable theme        [ttk::style theme use]
}

namespace eval DnD {
  variable timer {}
  variable start {}
}

################################################################################
# PROCEDURES
#
proc showMessage {msg} {
  after cancel {set tQEMU::msg ""}
  set tQEMU::msg $msg
  after 5000 {set tQEMU::msg ""}
}

proc stateStartButton {} {
  set state [expr {$tQEMU::cdrom eq "" && $tQEMU::filelist eq "" ? "disabled" : "normal"}]
  .btn_start configure -state $state
  .menu.file entryconfigure "Start QEMU..." -state $state
}

proc enableHyperV {} {
  if {$tQEMU::hyperv == 1} {
    append tQEMU::cpu ",hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time"
  } else {
    set tQEMU::cpu [lindex [split $tQEMU::cpu ","] 0]
  }
}

proc selectISOImage {entry} {
  set filetypes {
    {{ISO Files} {.iso .ISO}}
  }
  set tQEMU::cdrom [file nativename [tk_getOpenFile -parent . \
    -title "Select CD-ROM Image" -filetypes $filetypes -multiple false]]
  if {$tQEMU::cdrom ne ""} {
    $entry xview end
    showMessage "$tQEMU::cdrom ready"
  }
  stateStartButton
}

proc selectQEMUImages {tree} {
  set filetypes {
    {{QCOW2}     {.qcow2 .QCOW2}}
    {{All Files} {*}}
  }
  set filelist [file nativename [tk_getOpenFile -parent . \
    -title "Select QEMU Image Files" -filetypes $filetypes -multiple true]]
  if {$filelist eq ""} {return 1}
  foreach file $filelist {
    if {$file ni $tQEMU::filelist} {
      set node [$tree insert {} end -text $file]
      $tree tag add File $node
      set statelist [exec -ignorestderr -- qemu-img snapshot -l $file]
      set statelist [lsearch -all -inline \
        -regexp $statelist {vm-([[:digit:]]){14}\M}]
      if {$statelist ne ""} {
        foreach state $statelist {
          set childnode [$tree insert $node end -text $state]
          $tree tag add State $childnode
        }
      }
      lappend tQEMU::filelist $file
      $tree see $node
      $tree selection set $node
      showMessage "$file ready"
    } else {
      foreach node [$tree children {}] {
        if {[$tree item $node -text] eq $file} {
          $tree see $node
          $tree selection set $node
          showMessage "$file already exists"
        }
      }
    }
  }
  stateStartButton
}

proc createQEMUImage {} {
  set filetypes {
    {{QCOW2}     {.qcow2 .QCOW2}}
    {{All Files} {*}}
  }
  set filename [file nativename [tk_getSaveFile -parent . \
    -title "Create QEMU Image File" -filetypes $filetypes \
    -defaultextension .qcow2]]
  if {$filename eq ""} {return 2}
  append imgsize $tQEMU::imgsize "G"
  exec -ignorestderr -- qemu-img create -f qcow2 $filename $imgsize
  showMessage "$filename created Size:$imgsize Type:qcow2"
}

proc selectSharedDir {entry} {
  set tQEMU::smb [file nativename [tk_chooseDirectory -parent . \
    -title "Select Shared Directory" -mustexist true]]
  if {$tQEMU::smb eq ""} {
    showMessage "share disabled"
    return 2
  }
  $entry xview end
  showMessage "$tQEMU::smb share enabled"
}

proc selectBinary {entry} {
  set executable [file nativename [tk_getOpenFile -parent . \
    -title "Select QEMU Executable File" -multiple false]]
  if {$executable eq ""} {return 2}
  if {[auto_execok $executable] eq ""} {
    tk_messageBox -title "ERROR" -icon error -type ok -parent . \
      -message "[file tail $executable]:" -detail "Not a valid executable file"
    return 1
  }
  set tQEMU::bin $executable
  $entry xview end
}

proc loadState {node tree} {
  set filename [$tree item [$tree parent $node] -text]
  set loadvm [$tree item $node -text]
  set command [buildExecCmd "loadvm"]
  lappend command --blockdev driver=qcow2,node-name=QEMUDisk0,file.driver=file,file.filename=$filename \
    --device $tQEMU::storage,drive=QEMUDisk0 --loadvm $loadvm
  startQEMU $command
  showMessage "QEMU is loading state $loadvm..."
}

proc removeFile {node tree} {
  set file [$tree item $node -text]
  set index [lsearch $tQEMU::filelist [$tree item $node -text]]
  $tree tag remove File $node
  $tree delete $node
  set tQEMU::filelist [lreplace $tQEMU::filelist $index $index]
  showMessage "$file removed"
}

proc deleteState {node tree} {
  set state [$tree item $node -text]
  set file [$tree item [$tree parent $node] -text]
  $tree tag remove State $node
  $tree delete $node
  exec -ignorestderr -- qemu-img snapshot -d $state $file &
  showMessage "$state deleted"
}

proc buildExecCmd {{loadvm ""}} {
  set command [list $tQEMU::bin --name tQEMU --display $tQEMU::display \
    --rtc base=$tQEMU::rtcbase,clock=$tQEMU::rtcclock \
    --machine $tQEMU::machine --accel $tQEMU::accel \
    --boot order=dc,menu=$tQEMU::menu,strict=$tQEMU::strict \
    --cpu $tQEMU::cpu --m $tQEMU::ram --device $tQEMU::vga]
  if {$tQEMU::snapshot == 1} {
    lappend command --snapsnot
  }
  if {$tQEMU::pause == 1} {
    lappend command --S
  }
  if {$tQEMU::daemon == 1} {
    lappend command --daemonize
  }
  if {$tQEMU::fscreen == 1} {
    lappend command --full-screen
  }
  switch -glob -- $tQEMU::snd {
    "none" {}
    "*intel-hda" {
      lappend command --audiodev $tQEMU::audio,id=QEMUAudio \
        --device $tQEMU::snd --device hda-duplex,audiodev=QEMUAudio
    }
    default {
      lappend command --audiodev $tQEMU::audio,id=QEMUAudio \
        --device $tQEMU::snd,audiodev=QEMUAudio
    }
  }
  if {$tQEMU::nic eq "none"} {
    lappend command --nic none
  } else {
    lappend command --device $tQEMU::nic,netdev=QEMUNet
    if {$tQEMU::smb eq ""} {
      lappend command --netdev user,id=QEMUNet
    } else {
      lappend command --netdev user,id=QEMUNet,smb=$tQEMU::smb
    }
  }
  if {$tQEMU::filelist ne "" && $loadvm eq ""} {
    set i 0
    foreach filename $tQEMU::filelist {
      lappend command --blockdev driver=qcow2,node-name=QEMUDisk$i,file.driver=file,file.filename=$filename \
        --device $tQEMU::storage,drive=QEMUDisk$i
      incr i
    }
    showMessage "QEMU is starting [lindex $tQEMU::filelist 0]..."
  }
  if {$tQEMU::cdrom ne ""} {
    lappend command --cdrom $tQEMU::cdrom
    showMessage "QEMU is starting $tQEMU::cdrom..."
  }
  return $command
}

proc startQEMU {command} {
  exec -ignorestderr -- {*}$command
}

proc startDnD {W x y X Y} {
  set DnD::timer [list dragNode $W $x $y $X $Y]
  after 200 $DnD::timer
}

proc dragNode {W x y X Y } {
  set DnD::timer ""
  set DnD::start [$W selection]
  set node [$W identify item $x $y]
  toplevel .dnd
  tk::label .dnd.node -relief raised -padx 5 -pady 5 \
    -bg "white" -text [$W item $node -text]
  pack .dnd.node -in .dnd -expand true -fill both
  wm resizable .dnd 0 0
  wm geometry .dnd "+${X}+${Y}"
  wm overrideredirect .dnd true
  wm attributes .dnd -topmost true
  $W tag bind File <Motion> {moveItem %W %x %y %X %Y}
  $W configure -cursor "hand2"
}

proc dropNode {W x y} {
  if {$DnD::timer ne ""} {
    after cancel $DnD::timer
    return 0
  }
  $W configure -cursor "left_ptr"
  set from $DnD::start
  if {$DnD::start eq ""} {return 0}
  set node [$W identify item $x $y]
  set to [$W index $node]
  if {[string is integer -strict $to]} {
    $W move $from {} $to
    $W selection set [$W identify item $x $y]
    set tQEMU::filelist [list]
    foreach treelist [$W children {}] {
      lappend tQEMU::filelist [$W item $treelist -text]
    }
  }
  set DnD::start ""
  $W tag bind File <Motion> {return 0}
  destroy .dnd
}

proc moveItem {W x y X Y} {
  if {[winfo exists .dnd]} {
    set to [$W index [$W identify item $x $y]]
    if {[string is integer -strict $to]} {
      wm geometry .dnd "+${X}+${Y}"
      $W selection set [$W identify item $x $y]
    }
  }
}

proc cancelDnD {W} {
  if {[winfo exists .dnd]} {
    $W configure -cursor "left_ptr"
    set DnD::start ""
    $W tag bind File <Motion> {return 0}
    destroy .dnd
  }
}

proc showCommand {} {
  set command [buildExecCmd]
  tk_messageBox -title "Show Command" -icon info -type ok -parent . \
    -message "QEMU Command:" -detail $command
}

proc copyCommand {} {
  set command [buildExecCmd]
  clipboard clear
  clipboard append -type STRING -- $command
  showMessage "Command copied to clipboard"
}

proc aboutHost {} {
  tk_messageBox -title "About Host" -icon info -type ok -parent . \
    -message "Tcl/Tk Version: [info patchlevel]" \
    -detail "\
      User Name:\t$::tcl_platform(user)\n\
      Hostname:\t[info hostname]\n\
      OS Family:\t$::tcl_platform(platform)\n\
      OS Identifier:\t$::tcl_platform(os)\n\
      OS Version:\t$::tcl_platform(osVersion)\n\
      Architecture:\t$::tcl_platform(machine)\n\
      Window System:\t[tk windowingsystem]"
}

proc helpAbout {} {
  tk_messageBox -title "About tQEMU" -icon info -type ok -parent . \
    -message "tQEMU" -detail \
{A simple QEMU frontend,
written in core Tcl/Tk.

MIT License

Copyright (c) Thanos Zygouris
<athanasios.zygouris@gmail.com>}
}

proc aboutQEMU {} {
  tk_messageBox -title "About QEMU" -icon info -type ok -parent . \
    -message "What is QEMU" -detail \
{QEMU is a generic and open source
machine emulator and virtualizer.

For more informations, visit:
    https://www.qemu.org}
}

################################################################################
# MENUS
#
proc createMenus {} {
  option add *tearOff false
  . configure -menu [menu .menu]
  .menu add cascade -label "File" -underline 0 -menu [menu .menu.file]
    .menu.file add command -label "Start QEMU..." -underline 6 \
      -accelerator "F5" -command {startQEMU [buildExecCmd]} -state disabled
    .menu.file add separator
    .menu.file add command -label "Select CD-ROM Image..." -underline 10 \
      -accelerator "F3" -command {selectISOImage .ent_cdrom}
    .menu.file add command -label "Select QEMU Images..." -underline 0 \
      -accelerator "F4" -command {selectQEMUImages .trv_files}
    .menu.file add command -label "Create QEMU Image..." -underline 0 \
      -accelerator "F6" -command {createQEMUImage}
    .menu.file add separator
    .menu.file add command -label "Shared Directory..." -underline 7 \
      -accelerator "F7" -command {selectSharedDir .ent_smb}
    .menu.file add separator
    .menu.file add command -label "QEMU Executable..." -underline 5 \
      -accelerator "F8" -command {selectBinary .ent_bin}
    .menu.file add separator
    .menu.file add command -label "Exit" -underline 1 \
      -accelerator "Ctrl+Q" -command {exit}
  .menu add cascade -label "Options" -underline 0 -menu [menu .menu.options]
    .menu.options add checkbutton -label "Snapshot" -underline 0 \
      -accelerator "Ctrl+S" -variable tQEMU::snapshot
    .menu.options add checkbutton -label "Fullscreen" -underline 0 \
      -accelerator "Ctrl+F" -variable tQEMU::fscreen
    .menu.options add checkbutton -label "Daemonize" -underline 7 \
      -accelerator "Ctrl+Z" -variable tQEMU::daemon
    .menu.options add checkbutton -label "Start Paused" -underline 6 \
      -accelerator "Ctrl+P" -variable tQEMU::pause
    .menu.options add separator
    .menu.options add checkbutton -label "Hyper-V" -underline 0 \
      -variable tQEMU::hyperv -command {enableHyperV}
    .menu.options add separator
    .menu.options add cascade -label "Boot" -underline 0 -menu [menu .menu.options.boot]
      .menu.options.boot add checkbutton -label "Boot Menu" -underline 0 \
        -variable tQEMU::menu -onvalue "on" -offvalue "off"
      .menu.options.boot add checkbutton -label "Strict Boot" -underline 0 \
      -variable tQEMU::strict -onvalue "on" -offvalue "off"
    .menu.options add cascade -label "Audio" -underline 0 -menu [menu .menu.options.audio]
      foreach audio $tQEMU::audiolist {
        .menu.options.audio add radiobutton -label $audio \
          -variable tQEMU::audio -value $audio
      }
    .menu.options add cascade -label "Display" -underline 0 -menu [menu .menu.options.display]
      foreach display $tQEMU::displaylist {
      .menu.options.display add radiobutton -label $display \
        -variable tQEMU::display -value $display
      }
    .menu.options add cascade -label "Storage" -underline 0 -menu [menu .menu.options.storage]
      foreach storage $tQEMU::storagelist {
        .menu.options.storage add radiobutton -label $storage \
          -variable tQEMU::storage -value $storage
      }
    .menu.options add cascade -label "Machine" -underline 0 -menu [menu .menu.options.machine]
      foreach machine $tQEMU::machinelist {
        .menu.options.machine add radiobutton -label $machine \
          -variable tQEMU::machine -value $machine
      }
    .menu.options add cascade -label "Acceleration" -underline 0 -menu [menu .menu.options.accel]
      foreach accel $tQEMU::accellist {
        .menu.options.accel add radiobutton -label $accel \
          -variable tQEMU::accel -value $accel
      }
    .menu.options add cascade -label "Real Time Clock" -underline 10 -menu [menu .menu.options.rtc]
        .menu.options.rtc add cascade -label "Base" -underline 0 -menu [menu .menu.options.rtcbase]
        foreach rtcbase $tQEMU::rtcbaselist {
          .menu.options.rtcbase add radiobutton -label $rtcbase \
            -variable tQEMU::rtcbase -value $rtcbase
        }
        .menu.options.rtc add cascade -label "Clock" -underline 0 -menu [menu .menu.options.rtcclock]
        foreach rtcclock $tQEMU::rtcclocklist {
          .menu.options.rtcclock add radiobutton -label $rtcclock \
            -variable tQEMU::rtcclock -value $rtcclock
        }
    .menu.options add separator
    .menu.options add cascade -label "Themes" -underline 0 -menu [menu .menu.options.themes]
      foreach theme [ttk::style theme names] {
        .menu.options.themes add radiobutton -label $theme -variable tQEMU::theme \
          -value $theme -command [list ttk::style theme use $theme]
      }
  .menu add cascade -label "Help" -underline 0 -menu [menu .menu.help]
    .menu.help add command -label "About Host..." -underline 6 \
      -accelerator "F2" -command {aboutHost}
    .menu.help add separator
    .menu.help add command -label "Copy Command" -underline 0 \
      -accelerator "Ctrl+C" -command {copyCommand}
    .menu.help add command -label "Show Command..." -underline 0 -command {showCommand}
    .menu.help add separator
    .menu.help add command -label "About tQEMU..." -underline 0 \
      -accelerator "F1" -command {helpAbout}
    .menu.help add command -label "About QEMU..." -underline 6 \
      -command {aboutQEMU}
}

################################################################################
# WIDGETS
#
proc createWidgets {} {
  ttk::style configure flat.TLabelframe -relief flat
  ttk::labelframe .lbf_vm -text "\u2022 Virtual Machine Configuration:" -style flat.TLabelframe
    ttk::label .lbl_cpu -text "CPU:"
    ttk::combobox .cbx_cpu -takefocus 0 -state readonly \
      -textvariable tQEMU::cpu -values $tQEMU::cpulist
    ttk::label .lbl_ram -text "RAM:"
    ttk::combobox .cbx_ram -takefocus 0 -state readonly \
      -textvariable tQEMU::ram -values $tQEMU::ramlist
    ttk::label .lbl_vga -text "VGA:"
    ttk::combobox .cbx_vga -takefocus 0 -state readonly \
      -textvariable tQEMU::vga -values $tQEMU::vgalist
    ttk::label .lbl_snd -text "Sound:"
    ttk::combobox .cbx_snd -takefocus 0 -state readonly \
      -textvariable tQEMU::snd -values $tQEMU::sndlist
    ttk::label .lbl_nic -text "Network:"
    ttk::combobox .cbx_nic -takefocus 0 -state readonly \
      -textvariable tQEMU::nic -values $tQEMU::niclist
    grid .lbl_cpu -in .lbf_vm -row 0 -column 0 -sticky we
    grid .cbx_cpu -in .lbf_vm -row 0 -column 1 -sticky we
    grid .lbl_ram -in .lbf_vm -row 1 -column 0 -sticky we
    grid .cbx_ram -in .lbf_vm -row 1 -column 1 -sticky we
    grid .lbl_vga -in .lbf_vm -row 2 -column 0 -sticky we
    grid .cbx_vga -in .lbf_vm -row 2 -column 1 -sticky we
    grid .lbl_snd -in .lbf_vm -row 3 -column 0 -sticky we
    grid .cbx_snd -in .lbf_vm -row 3 -column 1 -sticky we
    grid .lbl_nic -in .lbf_vm -row 4 -column 0 -sticky we
    grid .cbx_nic -in .lbf_vm -row 4 -column 1 -sticky we
    grid columnconfigure .lbf_vm .lbl_cpu -weight 1

  ttk::labelframe .lbf_cdrom -text "\u2022 CD-ROM Device:" -style flat.TLabelframe
    ttk::checkbutton .ckb_cdrom -text "Host CD-ROM" -variable tQEMU::cdrom \
      -onvalue "/dev/cdrom" -offvalue $tQEMU::cdrom
    ttk::entry .ent_cdrom -takefocus 0 -state readonly -textvariable tQEMU::cdrom
    grid .ckb_cdrom -in .lbf_cdrom -row 0 -column 0 -sticky we
    grid .ent_cdrom -in .lbf_cdrom -row 1 -column 0 -sticky we
    grid columnconfigure .lbf_cdrom .ent_cdrom -weight 1

  ttk::labelframe .lbf_dir -text "\u2022 Shared Directory\n(smb://10.0.2.4/qemu):" -style flat.TLabelframe
    ttk::entry .ent_smb -takefocus 0 -state readonly -textvariable tQEMU::smb
    grid .ent_smb -in .lbf_dir -row 0 -column 0 -sticky we
    grid columnconfigure .lbf_dir .ent_smb -weight 1

  ttk::frame .frm_cmd
    ttk::label .lbl_create -text "Create Image (GB):" -anchor e
    ttk::spinbox .sbx_imgsize -takefocus 0 -state readonly \
      -width 3 -textvariable tQEMU::imgsize \
      -from 10 -to 200 -increment 5 -format %02.0f
    ttk::button .btn_create -takefocus 0 -text "Create..." -underline 0 \
      -command {.menu.file invoke "Create QEMU Image..."}
    ttk::button .btn_start -takefocus 0 -text "Start" -underline 0 \
      -command {.menu.file invoke "Start QEMU..."} -state disabled
    ttk::button .btn_exit  -takefocus 0 -text "Exit" -underline 1 \
      -command {.menu.file invoke "Exit"}
    grid .lbl_create  -in .frm_cmd -row 0 -column 0 -sticky we -columnspan 2
    grid .sbx_imgsize -in .frm_cmd -row 0 -column 2 -sticky we
    grid .btn_exit    -in .frm_cmd -row 1 -column 0 -sticky w
    grid .btn_start   -in .frm_cmd -row 1 -column 1
    grid .btn_create  -in .frm_cmd -row 1 -column 2 -sticky e
    grid columnconfigure .frm_cmd .btn_start -weight 1

  ttk::labelframe .lbf_bin -text "\u2022 QEMU Executable:" -style flat.TLabelframe
    ttk::entry .ent_bin -takefocus 0 -state readonly -textvariable tQEMU::bin
    grid .ent_bin -in .lbf_bin -row 0 -column 0 -sticky we
    grid columnconfigure .lbf_bin .ent_bin -weight 1

  ttk::frame .frm_files
    ttk::treeview .trv_files -takefocus 0 -selectmode browse \
      -xscrollcommand {.trv_xsb set} -yscrollcommand {.trv_ysb set}
      .trv_files heading #0 -text "\u2022 Images & Saved States:" -anchor w \
        -command {.menu.file invoke "Select QEMU Images..."}
      .trv_files column #0 -width 0 -minwidth 750 -stretch 1
    ttk::scrollbar .trv_xsb -orient horizontal -command {.trv_files xview}
    ttk::scrollbar .trv_ysb -orient vertical   -command {.trv_files yview}
    grid .trv_files -in .frm_files -row 0 -column 0 -sticky news
    grid .trv_xsb   -in .frm_files -row 1 -column 0 -sticky we
    grid .trv_ysb   -in .frm_files -row 0 -column 1 -sticky ns
    grid columnconfigure .frm_files .trv_files -weight 1

  ttk::frame .frm_status -borderwidth 1 -relief sunken
      ttk::label .lbl_msg -relief flat -anchor w -textvariable tQEMU::msg
      ttk::sizegrip .sizegrip
      grid .lbl_msg  -in .frm_status -row 0 -column 0 -sticky we
      grid .sizegrip -in .frm_status -row 0 -column 1 -sticky e
      grid columnconfigure .frm_status .lbl_msg -weight 1

  grid .lbf_vm     -in . -row 0 -column 0 -sticky we -rowspan 2
  grid .lbf_cdrom  -in . -row 2 -column 0 -sticky we
  grid .lbf_dir    -in . -row 3 -column 0 -sticky we
  grid .frm_cmd    -in . -row 4 -column 0 -sticky we
  grid .lbf_bin    -in . -row 0 -column 1 -sticky we
  grid .frm_files  -in . -row 1 -column 1 -sticky we -rowspan 4
  grid .frm_status -in . -row 5 -column 0 -sticky we -columnspan 2
  grid rowconfigure    . .frm_files -weight 1
  grid columnconfigure . .frm_files -weight 1
}

################################################################################
# BINDINGS
#
proc createBindings {} {
  foreach keysym {<Escape> <ButtonRelease-1>} {
    bind all $keysym {cancelDnD .trv_files}
  }
  bind all <KP_Enter>  {event generate %W <Return>}
  bind all <F1>        {.menu.help invoke "About tQEMU..."}
  bind all <F2>        {.menu.help invoke "About Host..."}
  bind all <F3>        {.menu.file invoke "Select CD-ROM Image..."}
  bind all <F4>        {.menu.file invoke "Select QEMU Images..."}
  bind all <F6>        {.menu.file invoke "Create QEMU Image..."}
  bind all <F5>        {.menu.file invoke "Start QEMU..."}
  bind all <F7>        {.menu.file invoke "Shared Directory..."}
  bind all <F8>        {.menu.file invoke "QEMU Executable..."}
  bind all <Control-q> {.menu.file invoke "Exit"}
  bind all <Control-s> {.menu.options invoke "Snapshot"}
  bind all <Control-f> {.menu.options invoke "Fullscreen"}
  bind all <Control-z> {.menu.options invoke "Daemonize"}
  bind all <Control-p> {.menu.options invoke "Start Paused"}
  bind all <Control-c> {copyCommand}

  bind .cbx_cpu <<ComboboxSelected>> {enableHyperV}

  bind .ent_cdrom <ButtonRelease-3> {.menu.file invoke "Select CD-ROM Image..."}
  bind .ent_smb   <ButtonRelease-3> {.menu.file invoke "Shared Directory..."}
  bind .ent_bin   <ButtonRelease-3> {.menu.file invoke "QEMU Executable..."}
  bind .trv_files <ButtonRelease-3> {.menu.file invoke "Select QEMU Images..."}

  .trv_files tag bind File  <ButtonPress-1>   {startDnD %W %x %y %X %Y}
  .trv_files tag bind File  <ButtonRelease-1> {dropNode %W %x %y}
  .trv_files tag bind File  <Delete>          {removeFile [%W focus] %W}
  .trv_files tag bind State <Delete>          {deleteState [%W focus] %W}
  foreach keysym {<Return> <Double-ButtonRelease-1>} {
    .trv_files tag bind State $keysym {loadState [%W focus] %W}
  }
}

################################################################################
# MAIN PROGRAM
#
createMenus
createWidgets
createBindings

wm title     . "tQEMU $tQEMU::bin"
wm minsize   . 550 290
wm resizable . 0 0
wm protocol  . WM_DELETE_WINDOW {exit}

################################################################################
# COMMAND LINE
#
if {$::argc > 0} {
  foreach filename $::argv {
    if {[file isfile $filename]} {
      set filetype [string tolower [file extension $filename]]
      switch -- $filetype {
        .iso   {set tQEMU::cdrom [file nativename $filename]}
        .qcow2 {lappend tQEMU::filelist [file nativename $filename]}
      }
    }
  }
  startQEMU [buildExecCmd]
  exit
}
